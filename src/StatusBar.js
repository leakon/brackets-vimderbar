/*jslint vars: true, plusplus: true, nomen: true, indent: 4, maxerr: 50*/
/*global define, $, brackets, Mustache, setTimeout*/

// Handles status bar interactions
define(function (require, exports) {
    "use strict";

    // Brackets modules
    var CommandManager = brackets.getModule("command/CommandManager");
    var EditorManager = brackets.getModule("editor/EditorManager");
    var CodeMirror = brackets.getModule("thirdparty/CodeMirror2/lib/codemirror");
    // Local modules
    var ExCommandHistory = require("./ExCommandHistory");
    // Templates
    var panelHtml = require("text!templates/bottom-panel.html");
    // State
    var callback;
    var $dialog;
    var $input;
    var $mode;
    var inHistory;

    /**
     * Wipe out project command history
     */
    function resetHistory() {
        // TODO: clean out localStorage
        ExCommandHistory.resetHistory();
    }
    /**
     * @private
     * Change mode in status bar
     * @param {String} mode Current Vim mode
     */
    function updateVimStatus(mode) {
        if ($dialog) {
            $dialog.children(".vimderbar-mode").show();
            $dialog.children(".vimderbar-mode").text("-- " + mode + " --");
        }
    }
    /**
     * Open command dialog overlay in status bar
     * @param {String} template Template HTML for dialog, generated by CodeMirror Dialog
     */
    function openDialog(template, _callback, options) {
        callback = _callback;
        if (/^\(recording\)/.test(template)) {
            // call is from macro start
            $dialog.children(".vimderbar-mode").text(template);
            return function () {
                updateVimStatus("Normal");
            };
        } else {
            // call is from Ex dialog
            // grab shortText out of the provided template
            // TODO: this could be brittle, is the template format going to change?
            var shortText = $(Mustache.render(template))[0].innerHTML;
            if (typeof options.value !== "undefined") {
                $input.val(options.value);
            }
            $input.show();
            $input.focus();
            $dialog.children(".vimderbar-command-sign").text(shortText[0]);
            $dialog.children(".vimderbar-mode").hide();
            return;
        }
    }
    /**
     * @private
     * Handler for CodeMirror's vim.js vim-keypress event. Filters special keys
     * @param {String} key Key pressed
     */
    function onKeypress(key) {
        if (key === "/" || key === ":" || key === "?" || key === "u") {
            return;
        }
        CodeMirror.updateVimCommandKeys(key);
    }
    /**
     * @private
     * Handler for CodeMirror's vim.js vim-command-done event
     */
    function onCommandDone() {
        CodeMirror.clearVimCommandKeys();
        if ($mode !== "insert") {
            // need to next-tick with a timeout so the hinter knows it's open
            setTimeout(function () {
                CommandManager.trigger("beforeExecuteCommand");
            }, 0);
        }
    }
    /**
     * @private
     * Update vim mode and set status bar
     * @param {Object} e CodeMirror Vim event data
     */
    function updateMode(e) {
        updateVimStatus(e.mode);
        $mode = e.mode;
    }
    /**
     * @private
     * Add key to command status so user knows what they are typing
     * @param {String} key Text to be appended to current command
     */
    function updateVimCommandKeys(key) {
        if (key !== "?") {
            $dialog.children(".vimderbar-command-keys").append(key);
        }
    }
    /**
     * @private
     * Get current command from status bar
     */
    function getVimCommandKeys() {
        return $dialog.children(".vimderbar-command-keys").text();
    }
    /**
     * @private
     * Clear current command from status bar
     */
    function clearVimCommandKeys() {
        $dialog.children(".vimderbar-command-keys").text("");
    }

    CodeMirror.updateVimStatus = updateVimStatus;
    CodeMirror.updateVimCommandKeys = updateVimCommandKeys;
    CodeMirror.getVimCommandKeys = getVimCommandKeys;
    CodeMirror.clearVimCommandKeys = clearVimCommandKeys;

    /**
     * @private
     * Attach dom listeners to a CodeMirror instance
     * @param {CodeMirror} cm CodeMirror instance
     */
    function attachListeners(cm) {
        cm.openDialog = openDialog;
        cm.on("vim-keypress", onKeypress);
        cm.on("vim-command-done", onCommandDone);
        cm.on("vim-mode-change", updateMode);
    }
    /**
     * @private
     * Detach dom listeners from a CodeMirror instance
     * @param {CodeMirror} cm CodeMirror instance
     */
    function detachListeners(cm) {
        cm.off("vim-keypress", onKeypress);
        cm.off("vim-command-done", onCommandDone);
        cm.off("vim-mode-change", updateMode);
    }
    /**
     * @private
     * Handle activeEditorChange event, set vim event handlers on focused CodeMirror instance
     * @param {Brackets.Event} e EditorManager activeEditorChange
     */
    function activeEditorChange(e, focused, lostFocus) {
        if (lostFocus) {
            if (lostFocus.hasSelection) {
                var selection = lostFocus.getSelection();

                // 2018-08-09
                // disable this line to prevent jump to the top of the file when refocused
                // lostFocus.setCursorPos(selection.end.line, selection.end.ch, true);

            }
            detachListeners(lostFocus._codeMirror);
        }
        if (focused) {
            attachListeners(focused._codeMirror);
        }
    }
    /**
     * Setup Vim status bar, hook events and setup ExCommand history
     */
    function init() {
        // Add the HTML UI
        $(".content").append(Mustache.render(panelHtml));

        // start disabled
        $("#vimderbar").hide();

        $dialog = $("#vimderbar");
        $input = $dialog.children(".vimderbar-command");
        $input.on("keydown", function (e) {
            var keyName = CodeMirror.keyName(e);
            var commandVal = $input.val();
            if (keyName === "Up" || keyName === "Down") {
                if (!inHistory && commandVal !== "") {
                    // stash current command if exists so you can get back to it
                    ExCommandHistory.add(commandVal);
                }
                if (keyName === "Up") {
                    $input.val(ExCommandHistory.getPrevHistoryItem());
                } else {
                    $input.val(ExCommandHistory.getNextHistoryItem());
                }
                inHistory = true;
            } else if (e.keyCode === 13 || keyName === "Enter") {
                CodeMirror.e_stop(e);
                ExCommandHistory.add(commandVal);
                callback(commandVal);
                $input.blur();
            } else if (keyName === "Esc" || keyName === "Ctrl-C" || keyName === "Ctrl-[") {
                $input.blur();
            }
        });
        $input.on("blur", function () {
            $input.val("");
            $input.hide();
            $dialog.children(".vimderbar-command-sign").text("");
            $dialog.children(".vimderbar-mode").show();
            inHistory = false;
            ExCommandHistory.exitHistory();
            var active = EditorManager.getActiveEditor();
            if (active) {
                active._codeMirror.focus();
            }
        });
        EditorManager.on("activeEditorChange",  activeEditorChange);
        ExCommandHistory.init();
        $dialog.children(".vimderbar-mode").show();
        $dialog.children(".vimderbar-mode").text("-- Normal --");
        $mode = "normal";
    }

    exports.init = init;
    exports.resetHistory = resetHistory;
});
